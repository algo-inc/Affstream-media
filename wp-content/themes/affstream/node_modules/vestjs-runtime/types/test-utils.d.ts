import { Nullable } from "vest-utils";
declare enum IsolateKeys {
    Type = "$type",
    Keys = "keys",
    Key = "key",
    Parent = "parent",
    Data = "data",
    AllowReorder = "allowReorder"
}
type IsolateKey = Nullable<string>;
type TIsolate<P extends IsolatePayload = IsolatePayload> = {
    [IsolateKeys.AllowReorder]?: boolean;
    [IsolateKeys.Parent]: Nullable<TIsolate>;
    [IsolateKeys.Type]: string;
    [IsolateKeys.Keys]: Nullable<Record<string, TIsolate>>;
    [IsolateKeys.Data]: DataOnly<P>;
    children: Nullable<TIsolate[]>;
    key: IsolateKey;
    output: any;
} & UsedFeaturesOnly<P>;
type DataOnly<P extends IsolatePayload> = Omit<P, keyof IsolateFeatures>;
type UsedFeaturesOnly<P extends IsolatePayload> = Pick<P, keyof IsolateFeatures>;
type IsolateData = Record<string, any>;
type IsolatePayload = IsolateData & IsolateFeatures;
type IsolateFeatures = {
    [IsolateKeys.AllowReorder]?: boolean;
};
declare function genTestIsolate(data?: Record<string, any>): TIsolate;
export { genTestIsolate };
//# sourceMappingURL=test-utils.d.ts.map