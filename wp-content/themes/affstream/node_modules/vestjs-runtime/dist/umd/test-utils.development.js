(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["test-utils"] = {}));
})(this, (function (exports) { 'use strict';

  var IsolateKeys;
  (function (IsolateKeys) {
      IsolateKeys["Type"] = "$type";
      IsolateKeys["Keys"] = "keys";
      IsolateKeys["Key"] = "key";
      IsolateKeys["Parent"] = "parent";
      IsolateKeys["Data"] = "data";
      IsolateKeys["AllowReorder"] = "allowReorder";
  })(IsolateKeys || (IsolateKeys = {}));
  var MinifiedKeys;
  (function (MinifiedKeys) {
      MinifiedKeys["Type"] = "$";
      MinifiedKeys["Keys"] = "K";
      MinifiedKeys["Key"] = "k";
      MinifiedKeys["Parent"] = "P";
      MinifiedKeys["Data"] = "D";
      MinifiedKeys["AllowReorder"] = "aR";
  })(MinifiedKeys || (MinifiedKeys = {}));
  const KeyToMinified = {
      [IsolateKeys.Type]: MinifiedKeys.Type,
      [IsolateKeys.Keys]: MinifiedKeys.Keys,
      [IsolateKeys.Parent]: MinifiedKeys.Parent,
      [IsolateKeys.Data]: MinifiedKeys.Data,
      [IsolateKeys.Key]: MinifiedKeys.Key,
      [IsolateKeys.AllowReorder]: MinifiedKeys.AllowReorder,
  };
  // This const is an object that looks like this:
  // {
  //   '$': '$type',
  //   'K': 'keys',
  //   'P': 'parent',
  //   ...
  // }
  Object.entries(KeyToMinified).reduce((acc, [key, minified]) => Object.assign(acc, {
      [minified]: key,
  }), {});

  function genTestIsolate(data = {}) {
      return {
          children: [],
          data,
          key: null,
          keys: {},
          output: null,
          parent: null,
          [IsolateKeys.Type]: 'UnitTest',
      };
  }

  exports.genTestIsolate = genTestIsolate;

}));
