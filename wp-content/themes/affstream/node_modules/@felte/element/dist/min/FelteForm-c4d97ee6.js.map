{"version":3,"file":"FelteForm-c4d97ee6.js","sources":["../../src/stores.ts","../../src/FelteForm.ts"],"sourcesContent":["// Taken from https://github.com/sveltejs/svelte/blob/master/src/runtime/store/index.ts\n/** Callback to inform of a value updates. */\nexport type Subscriber<T> = (value: T) => void;\n\n/** Unsubscribes from value updates. */\nexport type Unsubscriber = () => void;\n\n/** Callback to update a value. */\nexport type Updater<T> = (value: T) => T;\n\n/** Cleanup logic callback. */\ntype Invalidator<T> = (value?: T) => void;\n\n/** Start and stop notification callbacks. */\nexport type StartStopNotifier<T> = (set: Subscriber<T>) => Unsubscriber | void;\n\n/** Pair of subscriber and invalidator. */\ntype SubscribeInvalidateTuple<T> = [Subscriber<T>, Invalidator<T>];\n\n/** Writable interface for both updating and subscribing. */\nexport interface Writable<T> {\n  /**\n   * Subscribe on value changes.\n   * @param run subscription callback\n   * @param invalidate cleanup callback\n   */\n  subscribe(\n    this: void,\n    run: Subscriber<T>,\n    invalidate?: Invalidator<T>\n  ): Unsubscriber;\n  /**\n   * Set value and inform subscribers.\n   * @param value to set\n   */\n  set(this: void, value: T): void;\n\n  /**\n   * Update value using callback and inform subscribers.\n   * @param updater callback\n   */\n  update(this: void, updater: Updater<T>): void;\n}\n\nconst subscriber_queue: any[] = [];\n\nconst noop = () => undefined;\n\nexport function safe_not_equal(a: unknown, b: unknown) {\n  return a != a\n    ? b == b\n    : a !== b || (a && typeof a === 'object') || typeof a === 'function';\n}\n\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nexport function writable<T>(\n  value?: T,\n  start: StartStopNotifier<T> = noop\n): Writable<T> {\n  let stop: Unsubscriber | null;\n  const subscribers: Set<SubscribeInvalidateTuple<T>> = new Set();\n\n  function set(new_value: T): void {\n    if (safe_not_equal(value, new_value)) {\n      value = new_value;\n      if (stop) {\n        // store is ready\n        const run_queue = !subscriber_queue.length;\n        for (const subscriber of subscribers) {\n          subscriber[1]();\n          subscriber_queue.push(subscriber, value);\n        }\n        if (run_queue) {\n          for (let i = 0; i < subscriber_queue.length; i += 2) {\n            subscriber_queue[i][0](subscriber_queue[i + 1]);\n          }\n          subscriber_queue.length = 0;\n        }\n      }\n    }\n  }\n\n  function update(fn: Updater<T>): void {\n    set(fn(value as any));\n  }\n\n  function subscribe(\n    run: Subscriber<T>,\n    invalidate: Invalidator<T> = noop\n  ): Unsubscriber {\n    const subscriber: SubscribeInvalidateTuple<T> = [run, invalidate];\n    subscribers.add(subscriber);\n    if (subscribers.size === 1) {\n      stop = start(set) || noop;\n    }\n    run(value as any);\n\n    return () => {\n      subscribers.delete(subscriber);\n      if (stop && subscribers.size === 0) {\n        stop();\n        stop = null;\n      }\n    };\n  }\n\n  return { set, update, subscribe };\n}\n","export { FelteSubmitError } from '@felte/core';\nexport type {\n  FelteSubmitEvent,\n  FelteErrorEvent,\n  FelteSuccessEvent,\n} from '@felte/core';\nimport type {\n  Obj,\n  FormConfig,\n  Keyed,\n  Errors,\n  Touched,\n  Helpers,\n  Form,\n  Paths,\n  FieldsSetter,\n  ObjectSetter,\n  FelteSubmitEvent,\n  FelteErrorEvent,\n  FelteSuccessEvent,\n  Readable,\n} from '@felte/core';\nimport { createForm, isEqual, createEventConstructors } from '@felte/core';\nimport { writable } from './stores';\n\ntype StoreValues<Data extends Obj> = {\n  [key: string]: unknown;\n\n  data?: Keyed<Data>;\n\n  errors?: Errors<Data>;\n\n  touched?: Touched<Data>;\n\n  warnings?: Errors<Data>;\n\n  isSubmitting: boolean;\n\n  isDirty: boolean;\n\n  isValid?: boolean;\n\n  isValidating: boolean;\n\n  interacted: string | null;\n};\n\nfunction failFor(name: string) {\n  return function () {\n    throw new TypeError(\n      `Can't call \"${name}\" on HTMLFelteFormElement. The element is not ready yet.`\n    );\n  };\n}\n\nconst storeKeys = [\n  'data',\n  'errors',\n  'touched',\n  'warnings',\n  'isSubmitting',\n  'isDirty',\n  'isValid',\n  'isValidating',\n  'interacted',\n];\n\nfunction capitalizeFirst(value: string) {\n  return value.charAt(0).toUpperCase() + value.slice(1);\n}\n\n/**\n * @event {CustomEvent} datachange\n * @event {CustomEvent} errorschange\n * @event {CustomEvent} warningschange\n * @event {CustomEvent} touchedchange\n * @event {CustomEvent} isvalidchange\n * @event {CustomEvent} issubmittingchange\n * @event {CustomEvent} isdirtychange\n * @event {CustomEvent} isvalidatingchange\n * @event {CustomEvent} interactedchange\n */\nexport class FelteForm<Data extends Obj = any> extends HTMLElement {\n  [key: string]: unknown;\n\n  id!: string;\n\n  /** @internal */\n  private _configuration: FormConfig<Data> = {};\n  set configuration(config: FormConfig<Data>) {\n    this._configuration = config;\n    if (this._destroy) {\n      this._destroy();\n      this._destroy = undefined;\n      this._ready = false;\n      this._createForm();\n    }\n  }\n\n  get configuration() {\n    return this._configuration;\n  }\n\n  elements?: HTMLFormElement['elements'];\n\n  /**\n   * Stores (observables)\n   *\n   * @internal\n   */\n  private _storeValues: StoreValues<Data> = {\n    data: undefined,\n    errors: undefined,\n    touched: undefined,\n    warnings: undefined,\n    isSubmitting: false,\n    isDirty: false,\n    isValid: undefined,\n    isValidating: false,\n    interacted: null,\n  };\n\n  get data() {\n    return this._storeValues.data;\n  }\n\n  onDataChange?(data: Data): void;\n\n  setData: ObjectSetter<Data, Paths<Data>> = failFor('setData');\n\n  setFields: FieldsSetter<Data, Paths<Data>> = failFor('setFields');\n\n  setInitialValues: Helpers<Data, Paths<Data>>['setInitialValues'] = failFor(\n    'setInitialValues'\n  );\n\n  addField: Helpers<Data, Paths<Data>>['addField'] = failFor('addField');\n\n  unsetField: Helpers<Data, Paths<Data>>['unsetField'] = failFor('unsetField');\n\n  swapFields: Helpers<Data, Paths<Data>>['swapFields'] = failFor('swapFields');\n\n  moveField: Helpers<Data, Paths<Data>>['moveField'] = failFor('moveField');\n\n  resetField: Helpers<Data, Paths<Data>>['resetField'] = failFor('resetField');\n\n  reset: Helpers<Data, Paths<Data>>['reset'] = failFor('reset');\n\n  submit: () => void = failFor('submit');\n\n  createSubmitHandler: Form<Data>['createSubmitHandler'] = failFor(\n    'createSubmitHandler'\n  );\n\n  get errors() {\n    return this._storeValues.errors;\n  }\n\n  onErrorsChange?(errors: Errors<Data>): void;\n\n  setErrors: Helpers<Data, Paths<Data>>['setErrors'] = failFor('setErrors');\n\n  get touched() {\n    return this._storeValues.touched;\n  }\n\n  onTouchedChange?(touched: Touched<Data>): void;\n\n  setTouched: Helpers<Data, Paths<Data>>['setTouched'] = failFor('setTouched');\n\n  get warnings() {\n    return this._storeValues.warnings;\n  }\n\n  onWarningsChange?(warnings: Errors<Data>): void;\n\n  setWarnings: Helpers<Data, Paths<Data>>['setWarnings'] = failFor(\n    'setWarnings'\n  );\n\n  get isSubmitting() {\n    return this._storeValues.isSubmitting;\n  }\n\n  onIsSubmittingChange?(isSubmitting: boolean): void;\n\n  setIsSubmitting: Helpers<Data, Paths<Data>>['setIsSubmitting'] = failFor(\n    'setIsSubmitting'\n  );\n\n  get isDirty() {\n    return this._storeValues.isDirty;\n  }\n\n  onIsDirtyChange?(isDirty: boolean): void;\n\n  setIsDirty: Helpers<Data, Paths<Data>>['setIsDirty'] = failFor('setIsDirty');\n\n  get isValid() {\n    return this._storeValues.isValid;\n  }\n\n  onIsValidChange?(isValid: boolean): void;\n\n  get isValidating() {\n    return this._storeValues.isValidating;\n  }\n\n  onIsValidatingChange?(isValidating: boolean): void;\n\n  get interacted() {\n    return this._storeValues.interacted;\n  }\n\n  onInteractedChange?(interacted: string | null): void;\n\n  setInteracted: Helpers<Data, Paths<Data>>['setInteracted'] = failFor(\n    'setInteracted'\n  );\n\n  /** @internal */\n  private _ready = false;\n  get ready() {\n    return this._ready;\n  }\n\n  onFelteReady?(): void;\n\n  validate: Helpers<Data, Paths<Data>>['validate'] = failFor('validate');\n\n  /** @internal */\n  private _formElement: HTMLFormElement | null = null;\n\n  /** @internal */\n  private _destroy?: () => void;\n\n  /** @internal */\n  private _createForm() {\n    const formElement = this._formElement;\n    if (!formElement) return;\n    const config = this.configuration;\n    this.elements = formElement.elements;\n\n    const { form, cleanup, ...rest } = createForm<Data>(config, {\n      storeFactory: writable,\n    });\n    this.setData = rest.setData;\n    this.setFields = rest.setFields;\n    this.setErrors = rest.setErrors;\n    this.setTouched = rest.setTouched;\n    this.setWarnings = rest.setWarnings;\n    this.setIsSubmitting = rest.setIsSubmitting;\n    this.setIsDirty = rest.setIsDirty;\n    this.setInteracted = rest.setInteracted;\n    this.setInitialValues = rest.setInitialValues;\n    this.validate = rest.validate;\n    this.addField = rest.addField;\n    this.unsetField = rest.unsetField;\n    this.swapFields = rest.swapFields;\n    this.moveField = rest.moveField;\n    this.resetField = rest.resetField;\n    this.reset = rest.reset;\n    this.submit = rest.handleSubmit;\n    this.createSubmitHandler = rest.createSubmitHandler;\n\n    const unsubs = storeKeys.map((key) => {\n      return (rest[key as keyof typeof rest] as Readable<any>).subscribe(\n        ($value) => {\n          if (isEqual($value, this._storeValues[key as string])) return;\n          this._storeValues[key as string] = $value;\n          const handler = this[`on${capitalizeFirst(key)}Change`];\n          if (typeof handler === 'function') handler($value);\n          this.dispatchEvent(new Event(`${key.toLowerCase()}change`));\n        }\n      );\n    });\n    const { destroy } = form(formElement);\n\n    const {\n      createSubmitEvent,\n      createErrorEvent,\n      createSuccessEvent,\n    } = createEventConstructors<Data>();\n\n    const handleFelteSubmit = (e: Event) => {\n      const event = e as FelteSubmitEvent;\n      const submitEvent = createSubmitEvent();\n      this.dispatchEvent(submitEvent);\n      if (submitEvent.defaultPrevented) event.preventDefault();\n      event.onSubmit = submitEvent.onSubmit;\n      event.onSuccess = submitEvent.onSuccess;\n      event.onError = submitEvent.onError;\n    };\n\n    const handleFelteSuccess = (e: Event) => {\n      const event = e as FelteSuccessEvent;\n      const successEvent = createSuccessEvent(event.detail);\n      this.dispatchEvent(successEvent);\n    };\n\n    const handleFelteError = (e: Event) => {\n      const event = e as FelteErrorEvent;\n      const errorEvent = createErrorEvent(event.detail);\n      this.dispatchEvent(errorEvent);\n      event.errors = errorEvent.errors;\n      if (errorEvent.defaultPrevented) event.preventDefault();\n    };\n\n    formElement.addEventListener('feltesubmit', handleFelteSubmit);\n    formElement.addEventListener('feltesuccess', handleFelteSuccess);\n    formElement.addEventListener('felteerror', handleFelteError);\n    this._destroy = () => {\n      destroy();\n      cleanup();\n      formElement.removeEventListener('feltesubmit', handleFelteSubmit);\n      formElement.removeEventListener('feltesuccess', handleFelteSuccess);\n      formElement.removeEventListener('felteerror', handleFelteError);\n      unsubs.forEach((unsub) => unsub());\n    };\n    this._ready = true;\n    this.onFelteReady?.();\n    this.dispatchEvent(\n      new Event('felteready', { bubbles: true, composed: true })\n    );\n  }\n\n  /** @internal */\n  private _updateForm = () => {\n    const formElement = this.querySelector('form') as HTMLFormElement | null;\n    if (!formElement || formElement === this._formElement) return;\n    this.dispatchEvent(\n      new Event('felteconnect', { bubbles: true, composed: true })\n    );\n    this._formElement = formElement;\n    this._destroy?.();\n    this._destroy = undefined;\n    this._createForm();\n  };\n\n  /** @internal */\n  private _observer?: MutationObserver;\n\n  connectedCallback() {\n    setTimeout(() => {\n      this._updateForm();\n      this._observer = new MutationObserver(this._updateForm);\n      this._observer.observe(this, { childList: true });\n    });\n  }\n\n  disconnectedCallback() {\n    this._destroy?.();\n    this._observer?.disconnect();\n  }\n\n  static get observedAttributes() {\n    return ['id'];\n  }\n\n  attributeChangedCallback(name: string, oldValue: any, newValue: any) {\n    if (oldValue === newValue) return;\n    switch (name) {\n      case 'id':\n        this.id = newValue;\n        break;\n    }\n  }\n}\n"],"names":["subscriber_queue","noop","writable","value","start","stop","subscribers","Set","set","new_value","b","a","run_queue","length","subscriber","push","i","update","fn","subscribe","run","invalidate","add","size","delete","failFor","name","TypeError","storeKeys","FelteForm","HTMLElement","constructor","this","_configuration","_storeValues","data","undefined","errors","touched","warnings","isSubmitting","isDirty","isValid","isValidating","interacted","setData","setFields","setInitialValues","addField","unsetField","swapFields","moveField","resetField","reset","submit","createSubmitHandler","setErrors","setTouched","setWarnings","setIsSubmitting","setIsDirty","setInteracted","_ready","validate","_formElement","_updateForm","formElement","querySelector","dispatchEvent","Event","bubbles","composed","_a","_destroy","call","_createForm","configuration","config","ready","elements","form","cleanup","rest","createForm","storeFactory","handleSubmit","unsubs","map","key","$value","isEqual","handler","charAt","toUpperCase","slice","toLowerCase","destroy","createSubmitEvent","createErrorEvent","createSuccessEvent","createEventConstructors","handleFelteSubmit","e","event","submitEvent","defaultPrevented","preventDefault","onSubmit","onSuccess","onError","handleFelteSuccess","successEvent","detail","handleFelteError","errorEvent","addEventListener","removeEventListener","forEach","unsub","onFelteReady","connectedCallback","setTimeout","_observer","MutationObserver","observe","childList","disconnectedCallback","_b","disconnect","observedAttributes","attributeChangedCallback","oldValue","newValue","id"],"mappings":"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"}