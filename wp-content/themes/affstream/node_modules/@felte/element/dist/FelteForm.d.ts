export { FelteSubmitError } from '@felte/core';
export type { FelteSubmitEvent, FelteErrorEvent, FelteSuccessEvent, } from '@felte/core';
import type { Obj, FormConfig, Keyed, Errors, Touched, Helpers, Form, Paths, FieldsSetter, ObjectSetter } from '@felte/core';
/**
 * @event {CustomEvent} datachange
 * @event {CustomEvent} errorschange
 * @event {CustomEvent} warningschange
 * @event {CustomEvent} touchedchange
 * @event {CustomEvent} isvalidchange
 * @event {CustomEvent} issubmittingchange
 * @event {CustomEvent} isdirtychange
 * @event {CustomEvent} isvalidatingchange
 * @event {CustomEvent} interactedchange
 */
export declare class FelteForm<Data extends Obj = any> extends HTMLElement {
    [key: string]: unknown;
    id: string;
    /** @internal */
    private _configuration;
    set configuration(config: FormConfig<Data>);
    get configuration(): FormConfig<Data>;
    elements?: HTMLFormElement['elements'];
    /**
     * Stores (observables)
     *
     * @internal
     */
    private _storeValues;
    get data(): Keyed<Data> | undefined;
    onDataChange?(data: Data): void;
    setData: ObjectSetter<Data, Paths<Data>>;
    setFields: FieldsSetter<Data, Paths<Data>>;
    setInitialValues: Helpers<Data, Paths<Data>>['setInitialValues'];
    addField: Helpers<Data, Paths<Data>>['addField'];
    unsetField: Helpers<Data, Paths<Data>>['unsetField'];
    swapFields: Helpers<Data, Paths<Data>>['swapFields'];
    moveField: Helpers<Data, Paths<Data>>['moveField'];
    resetField: Helpers<Data, Paths<Data>>['resetField'];
    reset: Helpers<Data, Paths<Data>>['reset'];
    submit: () => void;
    createSubmitHandler: Form<Data>['createSubmitHandler'];
    get errors(): Errors<Data> | undefined;
    onErrorsChange?(errors: Errors<Data>): void;
    setErrors: Helpers<Data, Paths<Data>>['setErrors'];
    get touched(): Touched<Data> | undefined;
    onTouchedChange?(touched: Touched<Data>): void;
    setTouched: Helpers<Data, Paths<Data>>['setTouched'];
    get warnings(): Errors<Data> | undefined;
    onWarningsChange?(warnings: Errors<Data>): void;
    setWarnings: Helpers<Data, Paths<Data>>['setWarnings'];
    get isSubmitting(): boolean;
    onIsSubmittingChange?(isSubmitting: boolean): void;
    setIsSubmitting: Helpers<Data, Paths<Data>>['setIsSubmitting'];
    get isDirty(): boolean;
    onIsDirtyChange?(isDirty: boolean): void;
    setIsDirty: Helpers<Data, Paths<Data>>['setIsDirty'];
    get isValid(): boolean | undefined;
    onIsValidChange?(isValid: boolean): void;
    get isValidating(): boolean;
    onIsValidatingChange?(isValidating: boolean): void;
    get interacted(): string | null;
    onInteractedChange?(interacted: string | null): void;
    setInteracted: Helpers<Data, Paths<Data>>['setInteracted'];
    /** @internal */
    private _ready;
    get ready(): boolean;
    onFelteReady?(): void;
    validate: Helpers<Data, Paths<Data>>['validate'];
    /** @internal */
    private _formElement;
    /** @internal */
    private _destroy?;
    /** @internal */
    private _createForm;
    /** @internal */
    private _updateForm;
    /** @internal */
    private _observer?;
    connectedCallback(): void;
    disconnectedCallback(): void;
    static get observedAttributes(): string[];
    attributeChangedCallback(name: string, oldValue: any, newValue: any): void;
}
//# sourceMappingURL=FelteForm.d.ts.map