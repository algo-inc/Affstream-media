import type { FieldValue } from '@felte/core';
export declare class FelteField<Value extends FieldValue = FieldValue> extends HTMLElement {
    [key: string]: unknown;
    static get observedAttributes(): string[];
    /** @internal */
    static get attributeMap(): Record<string, {
        converter: (v: any) => any;
        name: string;
    }>;
    attributeChangedCallback(name: string, oldValue: any, newValue: any): void;
    /**
     * @attr
     */
    name?: string;
    /**
     * @attr touchonchange
     */
    touchOnChange: boolean;
    /**
     * @attr valueprop
     */
    valueProp: string;
    /**
     * @attr inputevent
     */
    inputEvent: string;
    /**
     * @attr blurevent
     */
    blurEvent: string;
    /**
     * @attr
     */
    composed: boolean;
    /**
     * @attr
     */
    target?: string;
    /** @internal */
    private _value?;
    set value(newValue: Value);
    /**
     * @attr
     */
    get value(): Value;
    /** @internal */
    private _onInput?;
    /** @internal */
    private _onBlur;
    blur(): void;
    /** @internal */
    private _destroy?;
    /** @internal */
    private _ready;
    get ready(): boolean;
    onfeltefieldready?(): void;
    /** @internal */
    private _element?;
    /** @internal */
    private _createField;
    /** @internal */
    private _updateField;
    /** @internal */
    private _observer?;
    connectedCallback(): void;
    disconnectedCallback(): void;
}
//# sourceMappingURL=FelteField.d.ts.map